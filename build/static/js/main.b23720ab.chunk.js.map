{"version":3,"sources":["contexts/TransactionContext.js","hooks/useTransactions.js","components/TransactionItem.js","components/TransactionList.js","pages/Home.js","components/AddTransaction.js","components/Reports.js","components/Settings.js","App.js","index.js"],"names":["TransactionContext","createContext","TransactionProvider","_ref","children","transactions","setTransactions","useState","React","createElement","Provider","value","addTransaction","transaction","prevTransactions","useTransactions","useContext","TransactionItem","editTransaction","deleteTransaction","type","amount","category","onClick","handleDelete","id","TransactionList","map","key","Home","AddTransaction","setType","setAmount","setCategory","amountRef","useRef","onSubmit","e","preventDefault","newTransaction","Date","now","parseFloat","current","focus","onChange","target","ref","Reports","totalIncome","useMemo","filter","t","reduce","sum","totalExpenses","totalSavings","Settings","preferences","setPreferences","theme","notifications","handleChange","name","checked","prevState","console","log","App","Router","Link","to","Routes","Route","path","element","TransactionsList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b23720ab.chunk.js","sourcesContent":["// src/contexts/TransactionContext.js\nimport React, { createContext, useState, useContext } from 'react';\n\n// Create the context\nexport const TransactionContext = createContext();\n\n// Provider component\nexport const TransactionProvider = ({ children }) => {\n  const [transactions, setTransactions] = useState([]);\n\n  const addTransaction = (transaction) => {\n    setTransactions((prevTransactions) => [...prevTransactions, transaction]);\n  };\n\n  return (\n    <TransactionContext.Provider value={{ transactions, addTransaction }}>\n      {children}\n    </TransactionContext.Provider>\n  );\n};\n\n// Custom hook to use the context\nexport const useTransactions = () => {\n  return useContext(TransactionContext);\n};\n","// src/hooks/useTransactions.js\nimport { useContext } from 'react';\nimport { TransactionContext } from '../contexts/TransactionContext';\n\nconst useTransactions = () => {\n  return useContext(TransactionContext);\n};\n\nexport default useTransactions;\n","// src/components/TransactionItem.js\nimport React from 'react';\nimport useTransactions from '../hooks/useTransactions';\n\nconst TransactionItem = ({ transaction }) => {\n  const { editTransaction, deleteTransaction } = useTransactions();\n\n  const handleDelete = () => {\n    deleteTransaction(transaction.id);\n  };\n\n  return (\n    <li>\n      {transaction.type}: {transaction.amount} ({transaction.category})\n      <button onClick={() => editTransaction({ ...transaction, amount: transaction.amount + 10 })}>Edit</button>\n      <button onClick={handleDelete}>Delete</button>\n    </li>\n  );\n};\n\nexport default TransactionItem;\n","// src/components/TransactionList.js\nimport React from 'react';\nimport useTransactions from '../hooks/useTransactions';\nimport TransactionItem from './TransactionItem';\n\nconst TransactionList = () => {\n  const { transactions } = useTransactions();\n\n  return (\n    <div>\n      <h2>Transactions</h2>\n      <ul>\n        {transactions.map((transaction) => (\n          <TransactionItem key={transaction.id} transaction={transaction} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TransactionList;\n","// src/pages/Home.js\nimport React from 'react';\nimport TransactionList from '../components/TransactionList';\n\nconst Home = () => {\n  return (\n    <div>\n      <h1>Home</h1>\n      <TransactionList />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useState, useRef } from 'react';\nimport useTransactions from '../hooks/useTransactions';\n\nconst AddTransaction = () => {\n  // State to manage the type of transaction (Income, Expense, Savings)\n  const [type, setType] = useState('Income');\n  \n  // State to manage the amount of the transaction\n  const [amount, setAmount] = useState('');\n  \n  // State to manage the category of the transaction\n  const [category, setCategory] = useState('');\n  \n  // Custom hook to add a new transaction\n  const { addTransaction } = useTransactions();\n  \n  // Ref to focus on the amount input after submitting the form\n  const amountRef = useRef(null);\n\n  // Handle form submission\n  const handleSubmit = (e) => {\n    e.preventDefault(); // Prevent the default form submit behavior\n\n    // Create a new transaction object\n    const newTransaction = {\n      id: Date.now(), // Unique id based on current timestamp\n      type,\n      amount: parseFloat(amount), // Convert amount to a number\n      category,\n    };\n    \n    // Add the new transaction using the custom hook\n    addTransaction(newTransaction);\n    \n    // Clear the form fields\n    setAmount('');\n    setCategory('');\n    \n    // Focus back on the amount input field\n    amountRef.current.focus();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label>Type:</label>\n        <select value={type} onChange={(e) => setType(e.target.value)}>\n          <option value=\"Income\">Income</option>\n          <option value=\"Expense\">Expense</option>\n          <option value=\"Savings\">Savings</option>\n        </select>\n      </div>\n      <div>\n        <label>Amount:</label>\n        <input\n          type=\"number\"\n          value={amount}\n          onChange={(e) => setAmount(e.target.value)}\n          ref={amountRef} // Reference to focus on this input after submit\n        />\n      </div>\n      <div>\n        <label>Category:</label>\n        <input\n          type=\"text\"\n          value={category}\n          onChange={(e) => setCategory(e.target.value)}\n        />\n      </div>\n      <button type=\"submit\">Add Transaction</button>\n    </form>\n  );\n};\n\nexport default AddTransaction;\n","import React, { useMemo } from 'react';\nimport useTransactions from '../hooks/useTransactions';\n\nconst Reports = () => {\n  // Destructure transactions from the custom hook\n  const { transactions } = useTransactions();\n\n  // Calculate total income using useMemo to avoid recalculating on every render\n  const totalIncome = useMemo(() => {\n    return transactions\n      .filter(t => t.type === 'Income') // Filter transactions for type 'Income'\n      .reduce((sum, t) => sum + t.amount, 0); // Sum up the amounts\n  }, [transactions]); // Recalculate only when transactions change\n\n  // Calculate total expenses using useMemo\n  const totalExpenses = useMemo(() => {\n    return transactions\n      .filter(t => t.type === 'Expense') // Filter transactions for type 'Expense'\n      .reduce((sum, t) => sum + t.amount, 0); // Sum up the amounts\n  }, [transactions]); // Recalculate only when transactions change\n\n  // Calculate total savings using useMemo\n  const totalSavings = useMemo(() => {\n    return transactions\n      .filter(t => t.type === 'Savings') // Filter transactions for type 'Savings'\n      .reduce((sum, t) => sum + t.amount, 0); // Sum up the amounts\n  }, [transactions]); // Recalculate only when transactions change\n\n  return (\n    <div>\n      <h2>Reports</h2>\n      <p>Total Income: {totalIncome}</p>\n      <p>Total Expenses: {totalExpenses}</p>\n      <p>Total Savings: {totalSavings}</p>\n    </div>\n  );\n};\n\nexport default Reports;\n","import React, { useState } from 'react';\n\nconst Settings = () => {\n  // State to manage form data\n  const [preferences, setPreferences] = useState({\n    theme: 'light', // Example preference\n    notifications: true, // Example preference\n  });\n\n  // Handle change in form inputs\n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setPreferences(prevState => ({\n      ...prevState,\n      [name]: type === 'checkbox' ? checked : value,\n    }));\n  };\n\n  // Handle form submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // You can add logic here to save preferences\n    console.log('Preferences saved:', preferences);\n  };\n\n  return (\n    <div>\n      <h2>Settings</h2>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>\n            Theme:\n            <select\n              name=\"theme\"\n              value={preferences.theme}\n              onChange={handleChange}\n            >\n              <option value=\"light\">Light</option>\n              <option value=\"dark\">Dark</option>\n            </select>\n          </label>\n        </div>\n        <div>\n          <label>\n            Enable Notifications:\n            <input\n              type=\"checkbox\"\n              name=\"notifications\"\n              checked={preferences.notifications}\n              onChange={handleChange}\n            />\n          </label>\n        </div>\n        <button type=\"submit\">Save Settings</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Settings;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\nimport Home from './pages/Home';\nimport AddTransaction from './components/AddTransaction';\nimport TransactionsList from './components/TransactionList' ;\nimport Reports from './components/Reports';\nimport Settings from './components/Settings';\n// In index.js or App.js\nimport './styles/App.css'; // Adjust path if needed\n\nconst App = () => {\n  return (\n    <Router>\n      <nav>\n        <Link to=\"/\">Home</Link>\n        <Link to=\"/add-transaction\">Add Transaction</Link>\n        <Link to=\"/transactions\">Transactions List</Link>\n        <Link to=\"/reports\">Reports</Link>\n        <Link to=\"/settings\">Settings</Link>\n      </nav>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/add-transaction\" element={<AddTransaction />} />\n        <Route path=\"/transactions\" element={<TransactionsList />} />\n        <Route path=\"/reports\" element={<Reports />} />\n        <Route path=\"/settings\" element={<Settings />} />\n      </Routes>\n    </Router>\n  );\n};\n\nexport default App;\n","// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { TransactionProvider } from './contexts/TransactionContext'; // Adjust the path if necessary\n\nReactDOM.render(\n  <React.StrictMode>\n    <TransactionProvider>\n      <App />\n    </TransactionProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}