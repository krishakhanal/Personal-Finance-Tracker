{"ast":null,"code":"var _jsxFileName = \"/Users/HP/Desktop/fullstack/Finance/src/contexts/TransactionContext.js\";\nimport React, { createContext, useState, useContext } from 'react';\n\n// Create the context for transactions\nexport const TransactionContext = createContext();\n\n// Provider component for the context\nexport const TransactionProvider = ({\n  children\n}) => {\n  // State to store the list of transactions\n  const [transactions, setTransactions] = useState([]);\n\n  // Function to add a new transaction to the state\n  const addTransaction = transaction => {\n    setTransactions(prevTransactions => [...prevTransactions, transaction]);\n  };\n  return (\n    /*#__PURE__*/\n    // Provide the transactions and addTransaction function to the context\n    React.createElement(TransactionContext.Provider, {\n      value: {\n        transactions,\n        addTransaction\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 5\n      }\n    }, children, \" \")\n  );\n};\n\n// Custom hook to access the transaction context\nexport const useTransactions = () => {\n  return useContext(TransactionContext);\n};","map":{"version":3,"names":["React","createContext","useState","useContext","TransactionContext","TransactionProvider","children","transactions","setTransactions","addTransaction","transaction","prevTransactions","createElement","Provider","value","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","useTransactions"],"sources":["/Users/HP/Desktop/fullstack/Finance/src/contexts/TransactionContext.js"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\n\n// Create the context for transactions\nexport const TransactionContext = createContext();\n\n// Provider component for the context\nexport const TransactionProvider = ({ children }) => {\n  // State to store the list of transactions\n  const [transactions, setTransactions] = useState([]);\n\n  // Function to add a new transaction to the state\n  const addTransaction = (transaction) => {\n    setTransactions((prevTransactions) => [...prevTransactions, transaction]);\n  };\n\n  return (\n    // Provide the transactions and addTransaction function to the context\n    <TransactionContext.Provider value={{ transactions, addTransaction }}>\n      {children} {/* Render child components that can access the context */}\n    </TransactionContext.Provider>\n  );\n};\n\n// Custom hook to access the transaction context\nexport const useTransactions = () => {\n  return useContext(TransactionContext);\n};\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;;AAElE;AACA,OAAO,MAAMC,kBAAkB,GAAGH,aAAa,CAAC,CAAC;;AAEjD;AACA,OAAO,MAAMI,mBAAmB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EACnD;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;;EAEpD;EACA,MAAMO,cAAc,GAAIC,WAAW,IAAK;IACtCF,eAAe,CAAEG,gBAAgB,IAAK,CAAC,GAAGA,gBAAgB,EAAED,WAAW,CAAC,CAAC;EAC3E,CAAC;EAED;IAAA;IACE;IACAV,KAAA,CAAAY,aAAA,CAACR,kBAAkB,CAACS,QAAQ;MAACC,KAAK,EAAE;QAAEP,YAAY;QAAEE;MAAe,CAAE;MAAAM,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAClEd,QAAQ,EAAC,GACiB;EAAC;AAElC,CAAC;;AAED;AACA,OAAO,MAAMe,eAAe,GAAGA,CAAA,KAAM;EACnC,OAAOlB,UAAU,CAACC,kBAAkB,CAAC;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}